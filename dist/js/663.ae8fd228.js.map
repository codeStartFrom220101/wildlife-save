{"version":3,"file":"js/663.ae8fd228.js","mappings":"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","sources":["webpack://new-project/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://new-project/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://new-project/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://new-project/./node_modules/idb/build/wrap-idb-value.js","webpack://new-project/./node_modules/idb/build/index.js","webpack://new-project/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://new-project/./node_modules/@firebase/app-compat/dist/esm/index.esm2017.js","webpack://new-project/./node_modules/firebase/compat/app/dist/esm/index.esm.js","webpack://new-project/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://new-project/./node_modules/@firebase/database-compat/dist/index.esm2017.js","webpack://new-project/./src/assets/firebase/firebaseConfig.js","webpack://new-project/./src/assets/firebase/firebase.js","webpack://new-project/./src/stores/statusStore.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.9.9\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.21.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { ErrorFactory, contains, deepExtend, createSubscribe, isBrowser } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport * as modularAPIs from '@firebase/app';\nimport { _addComponent, deleteApp, _DEFAULT_ENTRY_NAME, _addOrOverwriteComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n *\r\n * marked as internal because it references internal types exported from @firebase/app\r\n * @internal\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(_delegate, firebase) {\r\n        this._delegate = _delegate;\r\n        this.firebase = firebase;\r\n        // add itself to container\r\n        _addComponent(_delegate, new Component('app-compat', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n        this.container = _delegate.container;\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        return this._delegate.automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this._delegate.automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get options() {\r\n        return this._delegate.options;\r\n    }\r\n    delete() {\r\n        return new Promise(resolve => {\r\n            this._delegate.checkDestroyed();\r\n            resolve();\r\n        }).then(() => {\r\n            this.firebase.INTERNAL.removeApp(this.name);\r\n            return deleteApp(this._delegate);\r\n        });\r\n    }\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    _getService(name, instanceIdentifier = _DEFAULT_ENTRY_NAME) {\r\n        var _a;\r\n        this._delegate.checkDestroyed();\r\n        // Initialize instance if InstatiationMode is `EXPLICIT`.\r\n        const provider = this._delegate.container.getProvider(name);\r\n        if (!provider.isInitialized() &&\r\n            ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === \"EXPLICIT\" /* InstantiationMode.EXPLICIT */) {\r\n            provider.initialize();\r\n        }\r\n        // getImmediate will always succeed because _getService is only called for registered components.\r\n        return provider.getImmediate({\r\n            identifier: instanceIdentifier\r\n        });\r\n    }\r\n    /**\r\n     * Remove a service instance from the cache, so we will create a new instance for this service\r\n     * when people try to get it again.\r\n     *\r\n     * NOTE: currently only firestore uses this functionality to support firestore shutdown.\r\n     *\r\n     * @param name The service name\r\n     * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n     * @internal\r\n     */\r\n    _removeServiceInstance(name, instanceIdentifier = _DEFAULT_ENTRY_NAME) {\r\n        this._delegate.container\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            .getProvider(name)\r\n            .clearInstance(instanceIdentifier);\r\n    }\r\n    /**\r\n     * @param component the component being added to this app's container\r\n     * @internal\r\n     */\r\n    _addComponent(component) {\r\n        _addComponent(this._delegate, component);\r\n    }\r\n    _addOrOverwriteComponent(component) {\r\n        _addOrOverwriteComponent(this._delegate, component);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,\r\n            options: this.options\r\n        };\r\n    }\r\n}\r\n// TODO: investigate why the following needs to be commented out\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n//   FirebaseAppImpl.prototype.delete ||\r\n//   console.log('dc');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app-compat', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Because auth can't share code with other components, we attach the utility functions\r\n * in an internal namespace to share code.\r\n * This function return a firebase namespace object without\r\n * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n * the lite version.\r\n */\r\nfunction createFirebaseNamespaceCore(firebaseAppImpl) {\r\n    const apps = {};\r\n    // // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    // const components = new Map<string, Component<any>>();\r\n    // A namespace is a plain JavaScript Object.\r\n    const namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        // @ts-ignore\r\n        __esModule: true,\r\n        initializeApp: initializeAppCompat,\r\n        // @ts-ignore\r\n        app,\r\n        registerVersion: modularAPIs.registerVersion,\r\n        setLogLevel: modularAPIs.setLogLevel,\r\n        onLog: modularAPIs.onLog,\r\n        // @ts-ignore\r\n        apps: null,\r\n        SDK_VERSION: modularAPIs.SDK_VERSION,\r\n        INTERNAL: {\r\n            registerComponent: registerComponentCompat,\r\n            removeApp,\r\n            useAsService,\r\n            modularAPIs\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    namespace['default'] = namespace;\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        delete apps[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || modularAPIs._DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps, name)) {\r\n            throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n        }\r\n        return apps[name];\r\n    }\r\n    // @ts-ignore\r\n    app['App'] = firebaseAppImpl;\r\n    /**\r\n     * Create a new App instance (name must be unique).\r\n     *\r\n     * This function is idempotent. It can be called more than once and return the same instance using the same options and config.\r\n     */\r\n    function initializeAppCompat(options, rawConfig = {}) {\r\n        const app = modularAPIs.initializeApp(options, rawConfig);\r\n        if (contains(apps, app.name)) {\r\n            return apps[app.name];\r\n        }\r\n        const appCompat = new firebaseAppImpl(app, namespace);\r\n        apps[app.name] = appCompat;\r\n        return appCompat;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps).map(name => apps[name]);\r\n    }\r\n    function registerComponentCompat(component) {\r\n        const componentName = component.name;\r\n        const componentNameWithoutCompat = componentName.replace('-compat', '');\r\n        if (modularAPIs._registerComponent(component) &&\r\n            component.type === \"PUBLIC\" /* ComponentType.PUBLIC */) {\r\n            // create service namespace for public components\r\n            // The Service namespace is an accessor function ...\r\n            const serviceNamespace = (appArg = app()) => {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                if (typeof appArg[componentNameWithoutCompat] !== 'function') {\r\n                    // Invalid argument.\r\n                    // This happens in the following case: firebase.storage('gs:/')\r\n                    throw ERROR_FACTORY.create(\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */, {\r\n                        appName: componentName\r\n                    });\r\n                }\r\n                // Forward service instance lookup to the FirebaseApp.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                return appArg[componentNameWithoutCompat]();\r\n            };\r\n            // ... and a container for service-level properties.\r\n            if (component.serviceProps !== undefined) {\r\n                deepExtend(serviceNamespace, component.serviceProps);\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            namespace[componentNameWithoutCompat] = serviceNamespace;\r\n            // Patch the FirebaseAppImpl prototype\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            firebaseAppImpl.prototype[componentNameWithoutCompat] =\r\n                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\r\n                // option added to the no-explicit-any rule when ESlint releases it.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                function (...args) {\r\n                    const serviceFxn = this._getService.bind(this, componentName);\r\n                    return serviceFxn.apply(this, component.multipleInstances ? args : []);\r\n                };\r\n        }\r\n        return component.type === \"PUBLIC\" /* ComponentType.PUBLIC */\r\n            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                namespace[componentNameWithoutCompat]\r\n            : null;\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        const useService = name;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\r\n    namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), { createFirebaseNamespace,\r\n        extendNamespace,\r\n        createSubscribe,\r\n        ErrorFactory,\r\n        deepExtend });\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        deepExtend(namespace, props);\r\n    }\r\n    return namespace;\r\n}\r\nconst firebase$1 = createFirebaseNamespace();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app-compat');\n\nconst name = \"@firebase/app-compat\";\nconst version = \"0.2.9\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    // Register `app` package.\r\n    registerVersion(name, version, variant);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Firebase Lite detection\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nif (isBrowser() && self.firebase !== undefined) {\r\n    logger.warn(`\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  `);\r\n    // eslint-disable-next-line\r\n    const sdkVersion = self.firebase.SDK_VERSION;\r\n    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\r\n        logger.warn(`\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    `);\r\n    }\r\n}\r\nconst firebase = firebase$1;\r\nregisterCoreComponents();\n\nexport { firebase as default };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nexport { default } from '@firebase/app-compat';\n\nvar name = \"firebase\";\nvar version = \"9.21.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfirebase.registerVersion(name, version, 'app-compat');\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"0.3.4\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete(),\r\n            forceWebSockets,\r\n            forceLongPolling\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, \r\n        /* appCheckProvider= */ undefined, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n//# sourceMappingURL=index.esm2017.js.map\n","export default {\r\n  apiKey: 'AIzaSyArLzj8nWNSxxSRGwS_UWF-v80zgAU_s2U',\r\n  authDomain: 'wildlife-save.firebaseapp.com',\r\n  projectId: 'wildlife-save',\r\n  storageBucket: 'wildlife-save.appspot.com',\r\n  messagingSenderId: '630848572536',\r\n  appId: '1:630848572536:web:3e6bb4f8e28623efc8b18d',\r\n  measurementId: 'G-DLXESV2QDM'\r\n}\r\n","import firebase from 'firebase/compat/app'\r\nimport 'firebase/compat/database'\r\nimport firbaseConfig from './firebaseConfig'\r\n\r\nfirebase.initializeApp(firbaseConfig)\r\n\r\nexport const db = firebase.database()\r\n","import { defineStore } from 'pinia'\r\n\r\nexport default defineStore('statusStore', {\r\n  state: () => ({\r\n    isLoading: false,\r\n    loadingItem: ''\r\n  })\r\n})\r\n"],"names":["CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","DecodeBase64StringError","constructor","super","arguments","name","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","Date","dateValue","getTime","prop","hasOwnProperty","isValidKey","key","getGlobal","self","window","g","getDefaultsFromGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","defaultsJsonString","JSON","parse","getDefaultsFromCookie","document","match","cookie","decoded","getDefaults","info","getDefaultAppConfig","_a","config","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","header","alg","type","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","stringify","getUA","navigator","isMobileCordova","test","isBrowser","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","ERROR_NAME","FirebaseError","code","customData","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","jsonEval","decode","claims","parts","split","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","createSubscribe","executor","onNoObservers","proxy","ObserverProxy","subscribe","bind","observers","unsubscribes","observerCount","task","finalized","then","next","forEachObserver","observer","complete","nextOrObserver","implementsAnyMethods","noop","unsub","unsubscribeOne","finalError","sendOne","err","methods","method","validateArgCount","fnName","minCount","maxCount","argCount","argError","errorPrefix","argName","validateCallback","argumentName","optional","validateContextObject","context","stringToByteArray","high","low","stringLength","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","warn","level","inst","setUserLogHandler","logCallback","customLogLevel","arg","toString","ignored","toLowerCase","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","addEventListener","cacheDonePromiseForTransaction","tx","done","DOMException","idbProxyTraps","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","apply","unwrap","storeNames","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","name$o","version$1","logger","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_addOrOverwriteComponent","_registerComponent","componentName","heartbeatController","triggerHeartbeat","_removeServiceInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","getApps","deleteApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","onLog","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","removeApp","_getService","toJSON","createFirebaseNamespaceCore","firebaseAppImpl","apps","namespace","__esModule","initializeAppCompat","registerComponent","registerComponentCompat","useAsService","modularAPIs","appCompat","componentNameWithoutCompat","serviceNamespace","appArg","serviceFxn","useService","defineProperty","createFirebaseNamespace","extendNamespace","firebase$1","sdkVersion","indexOf","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","firstLog_","enableLogging$1","logger_","persistent","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","readyState","called","wrappedFn","body","setTimeout","Math","floor","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","ebits","fbits","bias","s","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","errorForServerCode","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","platform","env","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","callbackContext","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","checkTransportInit","forceWebSockets","forceDisallow","forceLongPolling","forceAllow","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","enableLogging","registerDatabase","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","simpleListen","echo","onEcho","validateBoolean","bool","validateEventType","objectToMerge","newObjectToMerge","_database","getRef","Reference","Query","database","cancelCallbackOrContext","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","once","failureCallbackOrContext","cancelOrContext","getKey","getParent","getRoot","transactionResult","expPromise","expRef","useEmulator","initStandalone","customAuthImpl","ServerValue","TIMESTAMP","freeze","__proto__","databaseExp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","firbaseConfig","defineStore","state","isLoading","loadingItem"],"sourceRoot":""}